<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CalloutInterfaceAPI</name>
    </assembly>
    <members>
        <member name="T:CalloutInterfaceAPI.CalloutInterfaceAttribute">
            <summary>
            Represents an attribute that provides information about a callout for the Callout Interface.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.CalloutInterfaceAttribute.#ctor(System.String,LSPD_First_Response.Mod.Callouts.CalloutProbability,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalloutInterfaceAPI.CalloutInterfaceAttribute"/> class with the specified name, probability, description, priority, and agency.
            </summary>
            <param name="name">The name of the callout.</param>
            <param name="probability">The probability of the callout being triggered.</param>
            <param name="description">The description of the callout.</param>
            <param name="priority">The priority of the callout (optional).</param>
            <param name="agency">The agency associated with the callout (optional).</param>
        </member>
        <member name="P:CalloutInterfaceAPI.CalloutInterfaceAttribute.Agency">
            <summary>
            Gets the agency associated with the callout (e.g. LSSD, LSPD).
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.CalloutInterfaceAttribute.Description">
            <summary>
            Gets the description of the callout.  This is used by Callout Interface to list the callout on the callouts tab.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.CalloutInterfaceAttribute.Priority">
            <summary>
            Gets the priority of the callout (e.g. CODE 2, CODE 3).
            </summary>
        </member>
        <member name="T:CalloutInterfaceAPI.VehicleDocument">
            <summary>
            The type of vehicle document a policeman might be interested in.
            </summary>
        </member>
        <member name="T:CalloutInterfaceAPI.VehicleDocumentStatus">
            <summary>
            Replaces StopThePed's VehicleStatus enum for safety.
            </summary>
        </member>
        <member name="T:CalloutInterfaceAPI.Events">
            <summary>
            Callout Interface Helper events.
            </summary>
        </member>
        <member name="T:CalloutInterfaceAPI.Events.PedCheckEventHandler">
            <summary>
            The event handler delegate for OnPedCheck.
            </summary>
            <param name="record">The resulting record.</param>
            <param name="source">The source of the request.</param>
        </member>
        <member name="T:CalloutInterfaceAPI.Events.PlateCheckEventHandler">
            <summary>
            The event handler delegate for OnPlateCheck.
            </summary>
            <param name="record">The resulting record.</param>
            <param name="source">The source of the request.</param>
        </member>
        <member name="E:CalloutInterfaceAPI.Events.OnPedCheck">
            <summary>
            An event for a ped record.
            </summary>
        </member>
        <member name="E:CalloutInterfaceAPI.Events.OnPlateCheck">
            <summary>
            An event for a vehicle record
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Events.RaisePedCheckEvent(CalloutInterfaceAPI.Records.PedRecord,System.String)">
            <summary>
            Raises a ped check event.
            </summary>
            <param name="record">The result of the ped check.</param>
            <param name="source">The source of the request.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.Events.RaisePlateCheckEvent(CalloutInterfaceAPI.Records.VehicleRecord,System.String)">
            <summary>
            Raises a plate check event.
            </summary>
            <param name="record">The result of the plate check.</param>
            <param name="source">The source of the request.</param>
        </member>
        <member name="T:CalloutInterfaceAPI.External.CalloutInterfaceInvoker">
            <summary>
            Functions for interacting with CalloutInterface.  Calling these when CalloutInteface is unavailable will cause a crash.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.External.CalloutInterfaceInvoker.SendCalloutDetails(LSPD_First_Response.Mod.Callouts.Callout,System.String,System.String)">
            <summary>
            Sends the callout details to the Callout Interface.
            </summary>
            <param name="callout">The callout to send the details for.</param>
            <param name="priority">The priority of the callout.</param>
            <param name="agency">The agency associated with the callout.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.External.CalloutInterfaceInvoker.SendMessage(LSPD_First_Response.Mod.Callouts.Callout,System.String)">
            <summary>
            Sends a message to the Callout Interface.
            </summary>
            <param name="callout">The callout associated with the message.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.External.CalloutInterfaceInvoker.SendVehicle(Rage.Vehicle)">
            <summary>
            Sends a vehicle for the plate display.
            </summary>
            <param name="vehicle">The targeted vehicle.</param>
        </member>
        <member name="T:CalloutInterfaceAPI.External.StopThePedFunctions">
            <summary>
            Safe interface to StopThePed functions.
            </summary>
        </member>
        <member name="F:CalloutInterfaceAPI.External.StopThePedFunctions.IsStopThePedAvailable">
            <summary>
            Indicates whether the Callout Interface is available.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.External.StopThePedFunctions.GetVehicleDocumentStatus(Rage.Vehicle,CalloutInterfaceAPI.VehicleDocument)">
            <summary>
            Gets the vehicle's document status from StopThePed.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <param name="document">The type of document.</param>
            <returns>The relevant status if it's available.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.External.StopThePedFunctions.SetVehicleDocumentStatus(Rage.Vehicle,CalloutInterfaceAPI.VehicleDocument,CalloutInterfaceAPI.VehicleDocumentStatus)">
            <summary>
            Sets the vehicle document status in StopThePed.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <param name="document">Type of document.</param>
            <param name="status">The status.</param>
        </member>
        <member name="T:CalloutInterfaceAPI.External.StopThePedInvoker">
            <summary>
            Functions for interacting with StopThePed.  Calling this when StopThePed is unavailable will cause a crash.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.External.StopThePedInvoker.GetVehicleDocumentStatus(Rage.Vehicle,CalloutInterfaceAPI.VehicleDocument)">
            <summary>
            Gets the vehicle's document status from StopThePed.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <param name="document">The type of document.</param>
            <returns>The relevant status if it's available.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.External.StopThePedInvoker.SetVehicleDocumentStatus(Rage.Vehicle,CalloutInterfaceAPI.VehicleDocument,CalloutInterfaceAPI.VehicleDocumentStatus)">
            <summary>
            Sets the vehicle's document status in StopThePed.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <param name="document">The type of document.</param>
            <param name="status">The document status.</param>
        </member>
        <member name="T:CalloutInterfaceAPI.Functions">
            <summary>
            Miscellanous helper functions.
            </summary>
        </member>
        <member name="F:CalloutInterfaceAPI.Functions.IsCalloutInterfaceAvailable">
            <summary>
            Indicates whether the Callout Interface is available.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Functions.GetColorName(System.Drawing.Color)">
            <summary>
            Converts a Color struct into a readable name.  Kinda.  I did my best.
            </summary>
            <param name="color">The color.</param>
            <returns>A name of the color that is reasonably accurate.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.Functions.GetDateTime">
            <summary>
            Gets a consistent date time.
            </summary>
            <returns>A DateTime object that syncs with the in-game time of day and the current date.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.Functions.SendMessage(LSPD_First_Response.Mod.Callouts.Callout,System.String)">
            <summary>
            Sends a message to the Callout Interface.  Does not support color codes but it does support newlines (\n).
            If CalloutInterface is not available, does nothing.
            </summary>
            <param name="callout">The callout associated with the message.</param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.Functions.SendVehicle(Rage.Vehicle)">
            <summary>
            Sends a vehicle for the external (non-MDT) plate display.
            If CalloutInterface is not available, does nothing.
            </summary>
            <param name="vehicle">The targeted vehicle.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.Functions.GetVehicleMake(System.UInt32)">
            <summary>
            Retrieves the make of a vehicle.
            </summary>
            <param name="hash">The vehicle's model hash.</param>
            <returns>A string representing the vehicle's make.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.Functions.GetVehicleModel(System.UInt32)">
            <summary>
            Retrieves the model of a vehicle.
            </summary>
            <param name="hash">The vehicle's model hash.</param>
            <returns>A string representing the vehicle's model.</returns>
        </member>
        <member name="T:CalloutInterfaceAPI.Functions.ColorCondition">
            <summary>
            Represents a potential color combination based on HSB.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Functions.ColorCondition.#ctor(System.Func{System.Single,System.Single,System.Single,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalloutInterfaceAPI.Functions.ColorCondition"/> class.
            </summary>
            <param name="condition">The condition for which the color applies.</param>
            <param name="colorName">The name of the relevant color.</param>
        </member>
        <member name="P:CalloutInterfaceAPI.Functions.ColorCondition.Condition">
            <summary>
            Gets the condition.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Functions.ColorCondition.ColorName">
            <summary>
            Gets the color name.
            </summary>
        </member>
        <member name="T:CalloutInterfaceAPI.RandomNumberGenerator">
            <summary>
            A helper class for generating random numbers.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.RandomNumberGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Gets the next random number.
            </summary>
            <param name="minValue">The beginning of the range (inclusive).</param>
            <param name="maxValue">The end of the range (exclusive).</param>
            <returns>A random number.</returns>
        </member>
        <member name="T:CalloutInterfaceAPI.Records.Computer">
            <summary>
            The police computer.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.GetPedRecord(Rage.Ped)">
            <summary>
            Retrieves a ped record without doing an official ped check.
            </summary>
            <param name="ped">Rage.Ped ped.</param>
            <returns>The ped record.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.GetVehicleRecord(Rage.Vehicle)">
            <summary>
            Retrieves a vehicle record without doing an official plate check.
            </summary>
            <param name="vehicle">Rage.Vehicle vehicle.</param>
            <returns>The vehicle record.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.PedCheck(Rage.Ped,System.String)">
            <summary>
            Runs a ped check.
            </summary>
            <param name="ped">The ped to run a ped check against.</param>
            <param name="source">Some identifier to include so we know where the ped check request came from.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.PlateCheck(Rage.Vehicle,System.String)">
            <summary>
            Runs a plate check.
            </summary>
            <param name="vehicle">The vehicle to run the plate check against.</param>
            <param name="source">Some identifier to include so we know where the plate check request came from.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.GetDriverPersona(Rage.Vehicle)">
            <summary>
            Gets the persona for the driver of a vehicle if available.
            </summary>
            <param name="vehicle">The vehicle.</param>
            <returns>The persona, or null.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.GetOwnerPersona(Rage.Vehicle)">
            <summary>
            Gets the Ped Persona for the owner of the vehicle.
            NOTE: There isn't always a matching persona in the game.
            </summary>
            <param name="vehicle">The vehicle being looked up.</param>
            <returns>The relevant persona if available.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.PurgeAll">
            <summary>
            Prunes the databases completely.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.SetMaxInvalidDocumentRate(System.Single)">
            <summary>
            Sets the rate at which documents should return as invalid.
            </summary>
            <param name="rate">The rate as a value from 0-1f.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.SetMaxInvalidLicenseRate(System.Single)">
            <summary>
            Sets the rate at which licenses should return as invalid.
            </summary>
            <param name="rate">The rate as a value from 0-1f.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.Computer.SetMaxWantedRate(System.Single)">
            <summary>
            Sets the rate at which persons should come back wanted.
            </summary>
            <param name="rate">The rate as a value from 0-1f.</param>
        </member>
        <member name="T:CalloutInterfaceAPI.Records.EntityRecord`1">
            <summary>
            Represents a single entity.
            </summary>
            <typeparam name="TEntity">The type of entity for the record.</typeparam>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.EntityRecord`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CalloutInterfaceAPI.Records.EntityRecord`1"/> class.
            </summary>
            <param name="entity">The underlying entity for the record.</param>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.EntityRecord`1.Entity">
            <summary>
            Gets or sets the underlying entity for the record.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.EntityRecord`1.CreationDateTime">
            <summary>
            Gets or sets the real world DateTime for when the record was created.
            </summary>
        </member>
        <member name="T:CalloutInterfaceAPI.Records.PedDatabase">
            <summary>
            Represents a database of ped records.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedDatabase.MaxInvalidLicenseRate">
            <summary>
            Gets or sets the max invalid license rate.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedDatabase.MaxWantedRate">
            <summary>
            Gets or sets the max wanted rate.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.PedDatabase.Prune(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CalloutInterfaceAPI.Records.PedDatabase.CreateRecord(Rage.Ped)">
            <inheritdoc />
        </member>
        <member name="T:CalloutInterfaceAPI.Records.PedRecord">
            <summary>
            Represents a ped record.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.PedRecord.#ctor(Rage.Ped)">
            <summary>
            Initializes a new instance of the <see cref="T:CalloutInterfaceAPI.Records.PedRecord"/> class.
            </summary>
            <param name="ped">The underlying ped.</param>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedRecord.Advisory">
            <summary>
            Gets the advisory text.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedRecord.Birthday">
            <summary>
            Gets the ped's birthday.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedRecord.Citations">
            <summary>
            Gets the number of citations.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedRecord.First">
            <summary>
            Gets the ped's first name.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedRecord.IsMale">
            <summary>
            Gets a value indicating whether or not the ped is male.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedRecord.IsWanted">
            <summary>
            Gets a value indicating whether or not the ped is wanted.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedRecord.Last">
            <summary>
            Gets the peds last name.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedRecord.LicenseState">
            <summary>
            Gets the license state.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.PedRecord.Persona">
            <summary>
            Gets the persona for the Ped.
            </summary>
        </member>
        <member name="T:CalloutInterfaceAPI.Records.RecordDatabase`2">
            <summary>
            Represents a database of records.
            </summary>
            <typeparam name="TEntity">The type of Rage.Entity.</typeparam>
            <typeparam name="TRecord">The type of EntityRecord.</typeparam>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.RecordDatabase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalloutInterfaceAPI.Records.RecordDatabase`2"/> class.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.RecordDatabase`2.PruneInterval">
            <summary>
            Gets or sets a value indicating how long (in minutes) we should wait before automatically pruning records.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.RecordDatabase`2.Entities">
            <summary>
            Gets a dictionary of entity records with the entity's (hopefully unique) pool handle as key.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.RecordDatabase`2.GetRecord(`0)">
            <summary>
            Gets a record from the database based on the given entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>The relevant record.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.RecordDatabase`2.Prune(System.Int32)">
            <summary>
            Prunes the database of records.
            </summary>
            <param name="minutes">The maximum age of records in minutes.</param>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.RecordDatabase`2.CreateRecord(`0)">
            <summary>
            Creates a new record based on the entity.
            </summary>
            <param name="entity">The entity from which to create the record.</param>
            <returns>The new record.</returns>
        </member>
        <member name="T:CalloutInterfaceAPI.Records.VehicleDatabase">
            <summary>
            Represents a database of vehicle records.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleDatabase.MaxInvalidDocumentRate">
            <summary>
            Gets or sets the maximum invalid document rate.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.VehicleDatabase.Prune(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CalloutInterfaceAPI.Records.VehicleDatabase.CreateRecord(Rage.Vehicle)">
            <summary>
            Creates a database record.
            </summary>
            <param name="vehicle">The underlying vehicle.</param>
            <returns>The database record based on the vehicle.</returns>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.VehicleDatabase.GetDocumentStatus(Rage.Vehicle,CalloutInterfaceAPI.VehicleDocument)">
            <summary>
            Gets a vehicle registration status.
            </summary>
            <param name="vehicle">The vehicle to look up.</param>
            <param name="document">The type of vehicle document.</param>
            <returns>The status.</returns>
        </member>
        <member name="T:CalloutInterfaceAPI.Records.VehicleRecord">
            <summary>
            Represents a vehicle record looked up on the computer.
            </summary>
        </member>
        <member name="M:CalloutInterfaceAPI.Records.VehicleRecord.#ctor(Rage.Vehicle)">
            <summary>
            Initializes a new instance of the <see cref="T:CalloutInterfaceAPI.Records.VehicleRecord"/> class.
            </summary>
            <param name="vehicle">The Rage.Vehicle to base the record on.</param>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.Class">
            <summary>
            Gets the vehicle's class.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.Color">
            <summary>
            Gets the vehicle's color.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.InsuranceStatus">
            <summary>
            Gets the vehicle insurance status.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.LicensePlate">
            <summary>
            Gets the vehicle's license plate.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.LicensePlateStyle">
            <summary>
            Gets the vehicle's license plate style.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.Make">
            <summary>
            Gets the vehicle's make.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.Model">
            <summary>
            Gets the vehicle's model.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.OwnerName">
            <summary>
            Gets the vehicle's owner.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.OwnerPersona">
            <summary>
            Gets the vehicle owner's persona.
            </summary>
        </member>
        <member name="P:CalloutInterfaceAPI.Records.VehicleRecord.RegistrationStatus">
            <summary>
            Gets the vehicle registration status.
            </summary>
        </member>
    </members>
</doc>
